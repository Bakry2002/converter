# # FROM node:18 as builder

# # # Set the build environment to production by default why? so that we can run npm install without dev dependencies
# # ARG BUILD_ENV=production 

# # # Set the working directory in the container
# # WORKDIR /usr/src/app

# # # # Install required packages including ImageMagick
# # # RUN apt-get update && apt-get install -y build-essential libjpeg-dev libpng-dev libtiff-dev imagemagick 
# # # RUN apt install -y potrace libreoffice ffmpeg pandoc --fix-missing

# # # Install ImageMagick and Ghostscript
# # RUN apt-get update && apt-get install -y build-essential libjpeg-dev libpng-dev libtiff-dev ghostscript imagemagick 
# # RUN apt install -y potrace libreoffice 
# # RUN apt-get update && apt-get install -y ffmpeg
# # RUN apt-get update && apt-get install -y pandoc

# # # Add policy to allow PDF conversion
# # RUN sed -i '/rights="none" pattern="PDF"/s/none/read|write/' /etc/ImageMagick-6/policy.xml


# # # Copy package.json and package-lock.json to the container
# # COPY package*.json ./

# # RUN npm install

# # # Copy the rest of the application code to the container
# # COPY . .

# # # Generate prisma client
# # RUN npx prisma generate

# # # Clear the dist/ directory (if it exists)
# # RUN rm -rf dist/

# # # Build the application
# # RUN if [ "$BUILD_ENV" = "production" ]; then npx tsc --project tsconfig.converter.json; fi

# # # Stage 2: Set up the final image
# # FROM node:18

# # WORKDIR /usr/src/app

# # # Copy the node_modules and dist folders from the builder stage to the final image
# # COPY --from=builder /usr/src/app/node_modules ./node_modules 
# # COPY --from=builder /usr/src/app/dist ./dist
# # COPY --from=builder /usr/src/app/package.json ./package.json 
# # COPY --from=builder /usr/src/app/package-lock.json ./package-lock.json

# # # Command that will be run when the docker image is run 
# # CMD ["node", "dist/converter/index.js"]


# Stage 1: Build the application
FROM node:18 as builder

# Set the build environment to production by default so that we can run npm install without dev dependencies
ARG BUILD_ENV=production 

# Set the working directory in the container
WORKDIR /usr/src/app

# Install required packages including ImageMagick, Pandoc, and other dependencies
RUN apt-get update && apt-get install -y pandoc build-essential libjpeg-dev libpng-dev libtiff-dev ghostscript imagemagick \
    potrace libreoffice && apt-get clean

# # Install Python 3 and venv
# RUN apt-get update && apt-get install -y python3 python3-venv

# # Create a virtual environment
# RUN python3 -m venv /venv

# # Activate the virtual environment
# ENV PATH="/venv/bin:$PATH"

# # Install your Python packages within the virtual environment
# RUN pip install pdf2docx gTTS

# Install AWS CLI
RUN apt-get update && apt-get install -y unzip && \
    curl "https://d1vvhvl2y92vvt.cloudfront.net/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip" && \
    unzip awscliv2.zip && \
    ./aws/install && \
    rm -rf aws awscliv2.zip

# # Set AWS configuration (replace with your AWS credentials and region) Security Risk
# RUN aws configure set aws_access_key_id <YOUR_AWS_ACCESS_KEY> && \
#     aws configure set aws_secret_access_key <YOUR_AWS_SECRET_KEY> && \
#     aws configure set default.region <YOUR_AWS_REGION>

# Define build arguments for AWS credentials
ARG AWS_ACCESS_KEY_ID
ARG AWS_SECRET_ACCESS_KEY
ARG AWS_REGION

# Copy package.json and package-lock.json to the container
COPY package*.json ./

RUN npm install

# Copy the rest of the application code to the container
COPY . .

# Generate prisma client
RUN npx prisma generate

# Clear the dist/ directory (if it exists)
RUN rm -rf dist/

# Build the application
RUN if [ "$BUILD_ENV" = "production" ]; then npx tsc --project tsconfig.converter.json; fi

# Stage 2: Set up the final image
FROM node:18

WORKDIR /usr/src/app

# Copy the node_modules and dist folders from the builder stage to the final image
COPY --from=builder /usr/src/app/node_modules ./node_modules 
COPY --from=builder /usr/src/app/dist ./dist
COPY --from=builder /usr/src/app/package.json ./package.json 
COPY --from=builder /usr/src/app/package-lock.json ./package-lock.json

# Install Wine and Xvfb
RUN dpkg --add-architecture i386 && apt-get update && apt-get install -y wine32 xvfb

# Create a virtual X display
ENV DISPLAY=:99

# Set up Xvfb
RUN Xvfb :99 -ac -screen 0 1024x768x16 &

# Copy balcon.exe to the container (adjust the path accordingly)
COPY balcon.exe .

# Create a shell script to run both commands
RUN echo -e '#!/bin/sh\nxvfb-run wine balcon.exe &\nnode dist/converter/index.js' > run.sh && \
    chmod +x run.sh

# Command that will be run when the docker image is run 
CMD ["./run.sh"]

# # Command that will be run when the docker image is run 
# CMD ["node", "dist/converter/index.js"]
