// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider = "postgresql"
  url =  "postgresql://doadmin:AVNS_sBnPrn2vNqqRQdJphZo@prod-convertit-do-user-13867539-0.b.db.ondigitalocean.com:25060/defaultdb?sslmode=require"
  // directUrl = env("DIRECT_URL")
}

enum Plan {
  FREE
  PRO
}

model Tenant {
  id               String     @id @default(dbgenerated("concat('tnt_', replace(cast(gen_random_uuid() as text), '-', ''))")) @db.Text
  // what we do in the id? is to generate a uuid and replace the dashes with nothing and add a prefix at the beginning
  name             String?
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  stripeCustomerId String?
  plan             Plan       @default(FREE)
  expirationDate   DateTime? // NULL -> means no expiration
  inviteKey        String     @unique @default(dbgenerated("replace(cast(gen_random_uuid() as text), '-', '')")) @db.Text
  users            User[]
  conversions      Conversion[]
}

model User {
  id         String     @id @default(dbgenerated("concat('usr_', replace(cast(gen_random_uuid() as text), '-', ''))")) @db.Text
  email      String     @unique
  name       String?
  avatar     String?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  tenantId   String
  tenant     Tenant     @relation(fields: [tenantId], references: [id])
  conversions Conversion[]
}


enum ConversionStatus {
  PENDING
  PROCESSING
  DONE
  ERROR
}

model Conversion {
  id         String     @id @default(dbgenerated("concat('cnv_', replace(cast(gen_random_uuid() as text), '-', ''))")) @db.Text
  status     ConversionStatus  // status of the conversion
  currentStage  Int // current stage of the conversion
  error      String? // error message if any
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  tenantId   String?
  tenant     Tenant?     @relation(fields: [tenantId], references: [id])
  userId     String?
  user       User?       @relation(fields:  [userId], references: [id])
  stages    Stage[]
}

model Stage {
  id        String     @id @default(dbgenerated("concat('stg_', replace(cast(gen_random_uuid() as text), '-', ''))")) @db.Text
  order     Int
  mime     String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  artifacts  Artifact[]
  conversion Conversion @relation(fields: [conversionId], references: [id])
  conversionId String @db.Text
}

model Artifact {
  id         String     @id @default(dbgenerated("concat('art_', replace(cast(gen_random_uuid() as text), '-', ''))")) @db.Text
  order     Int
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  stage     Stage      @relation(fields: [stageId], references: [id])
  stageId    String     @db.Text
}